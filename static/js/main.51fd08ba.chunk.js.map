{"version":3,"sources":["Card.js","serviceWorker.js","robots.js","CardList.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["Card","id","name","email","console","log","className","alt","src","Boolean","window","location","hostname","match","robots","username","CardList","cardComponent","map","user","i","key","SearchBox","searfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2KAeeA,EAbF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,MAErB,OADAC,QAAQC,IAAIJ,EAAIC,GAEZ,yBAAKI,UAAY,uDACb,yBAAKC,IAAM,SAASC,IAAO,wBAAwBP,EAAG,aACtD,6BACI,4BAAKC,GACL,2BAAIC,M,YCGAM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBC,IAAMC,EAAS,CACpB,CACEb,GAAI,EACJC,KAAM,gBACNa,SAAU,OACVZ,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNa,SAAU,YACVZ,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNa,SAAU,WACVZ,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNa,SAAU,WACVZ,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNa,SAAU,SACVZ,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNa,SAAU,mBACVZ,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNa,SAAU,eACVZ,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNa,SAAU,gBACVZ,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNa,SAAU,WACVZ,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNa,SAAU,iBACVZ,MAAO,2BCxCIa,EAfE,SAAC,GAAa,IAAZF,EAAW,EAAXA,OACTG,EAAgBH,EAAOI,KAAI,SAACC,EAAMC,GACrC,OAAO,kBAAC,EAAD,CACNC,IAAOD,EACPnB,GAAMkB,EAAKlB,GACXC,KAAQiB,EAAKjB,KACbC,MAASW,EAAOM,GAAGjB,WAGvB,OACI,6BACKc,I,mCCFEK,EAVG,SAAC,GAA6B,EAA5BC,UAA6B,IAAlBC,EAAiB,EAAjBA,aAC3B,OACI,yBAAKlB,UAAY,OACb,2BAAOmB,KAAM,SAASC,YAAc,gBACpCpB,UAAY,mCACZqB,SAAYH,MCITI,EATA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAACC,SAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCkCJC,E,YAhCX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KAaNO,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAb7C,EAAKC,MAAQ,CACT5B,OAAQA,EACRyB,YAAa,IAJH,E,mHAiBL,IAAD,OACEI,EAAiBC,KAAKF,MAAM5B,OAAO+B,QAAO,SAAA/B,GAC5C,OAAOA,EAAOZ,KAAK4C,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAErE,OACI,yBAAKxC,UAAW,MACZ,2CACC,kBAAC,EAAD,CAAWkB,aAAgBoB,KAAKR,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUtB,OAAU6B,U,GA3BvBK,aCElBC,IAASC,OACD,kBAAC,EAAD,MACJC,SAASC,eAAe,SNwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,a","file":"static/js/main.51fd08ba.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) =>{\n    console.log(id, name)\n    return(\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> \n            <img alt = \"robots\" src = {'https://robohash.org/'+id+'?200x200'}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\nimport Card from './Card';\nimport {robots} from './robots';\n\nconst CardList = ({robots}) =>{\n    const cardComponent = robots.map((user, i) => {\n       return <Card \n        key = {i} \n        id = {user.id} \n        name = {user.name} \n        email = {robots[i].email}\n       />\n    })\n    return(\n        <div>\n            {cardComponent}\n        </div>\n    );\n}\nexport default CardList;\n\n// when we do a loop like we do in the map method we have to give a unique key  to each of \n// each of these elements otherswise if we want to remove or delete one of these elements react\n// does not know which element you mean thats why may change the whole elements","import React from 'react';\n\n\nconst SearchBox = ({searfield, searchChange}) =>{\n    return (\n        <div className = \"pa2\">\n            <input type ='search' placeholder = 'search robots' \n            className = 'pa3 ba b--green bg-lightest-blue'\n            onChange = {searchChange}\n            />\n        </div>\n    )\n}\nexport default SearchBox;","import React from \"react\";\n\n\nconst Scroll = (props) =>{\n    return (\n        <div style = {{overflow : 'scroll', border: '1px solid black', height: '600px'}}>\n            {props.children}\n        </div>\n    )\n}\n\n\nexport default Scroll;","import React , {Component} from 'react';\nimport CardList from './CardList';\nimport {robots} from './robots';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\n\n\nclass App extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            robots: robots,\n            searchfield: ''\n        }\n    }\n        componentDidMount(){\n            // in this method we can use fetch() method which is used to get api with url\n            // then we can set the result to the robots. instead of taking robots' detaile like\n            // name and id from the local file like robots.js we can take it from an external api \n            // fetch() method\n        }        \n        \n        onSearchChange = (event) => {\n            this.setState({searchfield: event.target.value})\n        }\n        render(){\n            const filteredRobots = this.state.robots.filter(robots => {\n                return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n            })\n            return (\n                <div className =\"tc\">\n                    <h1>RoboFriends</h1>\n                     <SearchBox searchChange = {this.onSearchChange}/>\n                     <Scroll>\n                     <CardList robots = {filteredRobots}/>\n                     </Scroll>\n                </div>\n            );\n        }\n    }\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Card from './Card';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport CardList from './CardList';\nimport App from './App';\n\nReactDOM.render(\n        <App/>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}